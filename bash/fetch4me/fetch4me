#!/bin/bash -e

USAGE_INFO="Usage: fetch4me [-w <dir>] [-r <referer>] (<url>)*"

ERROR_NO_URLS_GIVEN=0
ERROR_INVALID_PARAMS_DIR_EXPECTED=1
ERROR_INVALID_PARAMS_REFERER_EXPECTED=2
ERROR_CONFIG_NOT_AVALIABLE_FOR_READING_1=3
ERROR_CONFIG_NOT_AVALIABLE_FOR_READING_2=4
ERROR_INVALID_QQEDIR=5

ERRORS_ARRAY[$ERROR_NO_URLS_GIVEN]="No urls given and daemon is already running for specified QQEDIR"
ERRORS_ARRAY[$ERROR_INVALID_PARAMS_DIR_EXPECTED]="Invalid parameters: directory expected after \"-w\""
ERRORS_ARRAY[$ERROR_INVALID_PARAMS_REFERER_EXPECTED]="Invalid parameters: referer expected after \"-r\""
ERRORS_ARRAY[$ERROR_CONFIG_NOT_AVALIABLE_FOR_READING_1]="Config file \"~/.fetch4merc\" exists, but is not avaliable for reading"
ERRORS_ARRAY[$ERROR_CONFIG_NOT_AVALIABLE_FOR_READING_2]="Config file \"~/.fetch4me\" exists, but is not avaliable for reading"
ERRORS_ARRAY[$ERROR_INVALID_QQEDIR]="Invalid QQEDIR"

homedir=`echo ~`

error() {
    echo "ERROR: ${ERRORS_ARRAY[$1]}" >&2
    echo $USAGE_INFO >&2
    exit 1
}

takeParameter() {
    if cat "$homedir/$1" | grep "$2=" >/dev/null 2>&1
    then
        param=`cat "$homedir/$1" | grep "$2="`
        paramNameLen=${#2}
        paramNameLen=$[paramNameLen + 1]
        paramValue=${param:$paramNameLen}
    else
        paramValue=""
    fi
}

createDownloadRequestFiles() {
    for i in `seq 0 $[urlsCount - 1]`
    do
        url=${urls[$i]}
        fname="${url//"/"/_}_${referer//"/"/_}"
        fname="$qqedir/${fname//" "/+}"
        echo -n "$url|$referer" > "$fname.drf_tmp"
        mv "$fname.drf_tmp" "$fname.drf"
    done
}

paramExpectedDir=0
paramExpectedReferer=0

daemon=0

urlsCount=0

qqedir=""
getElemFunc=""
referer=""

n=0

while [ $n -lt $# ]
do
    n=$[n + 1]
    arg=${!n}

    if [ $paramExpectedDir -eq 1 ]
    then
        paramExpectedDir=0
        qqedir=$arg
        continue
    fi

    if [ $paramExpectedReferer -eq 1 ]
    then
        paramExpectedReferer=0
        referer=$arg
        continue
    fi

    case $arg in
        "--daemon")
            daemon=1
            ;;
        "-w")
            paramExpectedDir=1
            ;;
        "-r")
            paramExpectedReferer=1
            ;;
        *)
            urls[$urlsCount]=$arg
            urlsCount=$[urlsCount + 1]
            ;;
    esac
done

if [ $paramExpectedDir -eq 1 ]
then
    error $ERROR_INVALID_PARAMS_DIR_EXPECTED
fi
if [ $paramExpectedReferer -eq 1 ]
then
    error $ERROR_INVALID_PARAMS_REFERER_EXPECTED
fi

if [ -f "$homedir/.fetch4merc" ]
then
    if [ -r "$homedir/.fetch4merc" ]
    then
        if [ -z "$qqedir" ]
        then
            takeParameter ".fetch4merc" "QQEDIR"
            confDir=$paramValue
            if [ -n $confDir ]
            then
                qqedir=$confDir
            fi
        fi
        takeParameter ".fetch4merc" "GETELEMFUNC"
        confGetElemFunc=$paramValue
        if [ -n $confGetElemFunc ]
        then
            getElemFunc=$confGetElemFunc
        fi
    else
        error $ERROR_CONFIG_NOT_AVALIABLE_FOR_READING_1
    fi
fi

if [ -z "$qqedir" ]
then
    if [ -f "$homedir/.fetch4me" ]
    then
        if [ -r "$homedir/.fetch4me" ]
        then
            takeParameter ".fetch4me" "QQEDIR"
            confDir=$paramValue
            if [ -n $confDir ]
            then
                qqedir=$confDir
            fi
        else
            error $ERROR_CONFIG_NOT_AVALIABLE_FOR_READING_2
        fi
    fi
fi

if [ -z "$qqedir" ]
then
    error $ERROR_INVALID_QQEDIR
fi

if [ ! -d "$qqedir" ]
then
    error $ERROR_INVALID_QQEDIR
fi

if [ -z $getElemFunc ]
then
    if [ -f "$homedir/.fetch4me" ]
    then
        if [ -r "$homedir/.fetch4me" ]
        then
            takeParameter ".fetch4me" "GETELEMFUNC"
            confGetElemFunc=$paramValue
            if [ -n $confGetElemFunc ]
            then
                getElemFunc=$confGetElemFunc
            fi
        else
            error $ERROR_CONFIG_NOT_AVALIABLE_FOR_READING_2
        fi
    fi
fi

if [ -z $getElemFunc ]
then
    getElemFunc="wget"
fi

if [ $daemon -eq 1 ]
then
    # Code of daemon
    echo -n "$$" > "$qqedir/.daemon.pid"

    count=0

    if [ -f "$qqedir/.queue" ]
    then
        if [ -r "$qqedir/.queue" ]
        then
            while read line
            do
                echo "$line"

                declare -i splitPos=`expr index "$line" "|"`
                dlURLs[$count]=${line:0:$[splitPos - 1]}
                dlRefs[$count]=${line:$splitPos}
                count=$[count + 1]
            done < "$qqedir/.queue"
        fi
    fi

    current=0

    while true
    do
        if ls "$qqedir" | grep ".drf$" >/dev/null 2>&1
        then
            drfList=`ls "$qqedir" | grep ".drf$"`
            for drf in $drfList
            do
                drfContent=`cat "$qqedir/$drf"`
                echo "$drfContent" >> "$qqedir/.queue"
                rm "$qqedir/$drf"
                declare -i splitPos=`expr index "$drfContent" "|"`
                dlURLs[$count]=${drfContent:0:$[splitPos - 1]}
                dlRefs[$count]=${drfContent:$splitPos}
                count=$[count + 1]
            done
        fi

        if [ $current -lt $count ]
        then
            curRef=${dlRefs[$current]}
            curURL=${dlURLs[$current]}
            mkdir -p "$homedir/Downloads/fetched4you/${curRef//"/"/_}"
            $getElemFunc -O "$homedir/Downloads/fetched4you/${curRef//"/"/_}/${curURL//"/"/_}" -c --referer="$curRef" "$curURL"

            current=$[current + 1]
        else
            sleep 5
        fi
    done

    exit 0
fi

daemonPID="none"

if [ -f "$qqedir/.daemon.pid" ]
then
    if [ -r "$qqedir/.daemon.pid" ]
    then
        daemonPID=`cat "$qqedir/.daemon.pid"`
    fi
fi

if ps -A -o pid | grep "^$daemonPID$" >/dev/null 2>&1
then
    if [ $urlsCount -eq 0 ]
    then
        error $ERROR_NO_URLS_GIVEN
    fi

    createDownloadRequestFiles
else
    createDownloadRequestFiles

    # This doesn't work, I don't know why
    #trap "" SIGHUP

    # Using alternative daemon creation method
    ./fetch4me --daemon -w "$qqedir"&
fi

exit 0
